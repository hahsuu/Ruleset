name: Generate JSON Files from List Files

on:
  push:
    paths:
      - "*.list"

jobs:
  build:
    runs-on: ubuntu-22.04
    permissions:
      contents: write

    steps:
      - name: Checkout with full history
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.ref }}

      - name: Temporal Synchronization Lock
        run: |
          # 获取当前时间戳作为唯一标识
          lockfile=".git/gha-lock-$(date +%s)"
          git pull origin ${{ github.ref_name }} 2>&1 | tee $lockfile
          # 检查是否有真实冲突
          if grep -q "CONFLICT" $lockfile; then
            echo "发现真实冲突，需要人工干预！"
            exit 1
          fi

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Generate JSON files
        run: |
          # 生成前清理旧文件
          find . -name "*.json" -exec rm {} \;
          python generate_json.py
          # 验证生成结果
          if [ $(ls *.json | wc -l) -eq 0 ]; then
            echo "错误：未生成任何JSON文件"
            exit 1
          fi

      - name: Atomic Commit
        run: |
          git config --global user.name "Automated Processor"
          git config --global user.email "auto@users.noreply.github.com"
          
          # 使用临时分支避免污染主分支
          git checkout -B gh-actions-$(date +%s)
          
          # 精准添加文件
          git add $(ls *.json | tr '\n' ' ')
          
          # 差异检查策略
          if [ -z "$(git diff --staged)" ]; then
            echo "没有需要提交的变更"
            exit 0
          fi
          
          git commit -m "Atomic Update: $(date -uIs)"
          
          # 重基到最新版本
          git pull --rebase origin ${{ github.ref_name}}
          
          # 冲突检测
          if [ -f .git/rebase-apply/applying ]; then
            echo "检测到自动解决失败的冲突"
            exit 1
          fi

      - name: Smart Push
        run: |
          max_retry=3
          count=0
          until git push origin HEAD:${{ github.ref_name }} --force-with-lease; do
            count=$((count + 1))
            if [ $count -ge $max_retry ]; then
              echo "达到最大重试次数"
              exit 1
            fi
            git pull --rebase origin ${{ github.ref_name }}
            sleep $((RANDOM % 5 + 1)) # 随机等待避免活锁
          done
